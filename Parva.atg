  COMPILER Parva $CN
  /* Parva level 1 grammar  - Coco/R for C# (EBNF)
     Wollf, Muriithi, Stapleton
     Grammar only */

  CHARACTERS
    lf         = CHR(10) .
    backslash  = CHR(92) .
    control    = CHR(0) .. CHR(31) .
    letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                 + "abcdefghijklmnopqrstuvwxyz" .
    digit      = "123456789" .
    stringCh   = ANY - '"' - control - backslash .
    charCh     = ANY - "'" - control - backslash .
    printable  = ANY - control .

  TOKENS
    identifier = letter { letter | digit | "_" } .
    number     = "0" | digit { digit } {"0"} .
    stringLit  = '"' { stringCh | backslash printable } '"' .
    charLit    = "'" ( charCh   | backslash printable ) "'" .

  COMMENTS FROM "//" TO lf
  COMMENTS FROM "/*" TO "*/"
  IGNORE CHR(9) .. CHR(13)

  PRODUCTIONS
    Parva             = "void" identifier "(" ")" Block .
    Block             = "{" { Statement } "}" .
    Statement         =   Block | ";"
                        | Designator2 | ConstDeclarations | VarDeclarations
                        | Assignment | IfStatement | WhileStatement
                        | ReturnStatement | HaltStatement
                        | ReadStatement | WriteStatement  
                        | ReturnStatement | HaltStatement | RepeatUntil
                        | ReadStatement | WriteStatement | ReadLine | WriteLine
						| ForLoop | Set .
    ConstDeclarations = "const" OneConst { "," OneConst } ";" .
    OneConst          = identifier "=" Constant .
    Constant          =   number | charLit
                        | "true" | "false" | "null" .
    VarDeclarations   = Type OneVar { "," OneVar } ";" .
    OneVar            = identifier [ "=" Expression ] .
    Assignment        = Designator "=" Expression  ";" .
    Designator        = identifier [ "[" Expression "]" ]  .
	Designator2       = (("++"|"--") Designator | Designator ("++" | "--" )) ";" .
    IfStatement       = "if" "(" Condition ")" Statement ["else" Statement].
	WhileStatement    = "while" "(" Condition ")" Statement .
	RepeatUntil 	  = "repeat" Statement "until" "(" Condition ")".
	ForLoop 		  = "for" "(" Condition ")" Statement .
	ReturnStatement   = "return" ";" .
    HaltStatement     = "halt" ";" .
	Set				  = ("set" identifier {"," identifier} ["=" identifier] | "set[]" identifier "=" "new" "set[" number "]" ) ";" .
    ReadStatement     = "read" "(" ReadElement
                                   { "," ReadElement } ")" ";" .
	ReadLine		  = "readLine" "(" [identifier] ")" ";" .
    ReadElement       = stringLit | Designator .
    WriteStatement    = "write" "(" WriteElement
                                    { "," WriteElement } ")" ";" .
	WriteLine		  = "writeLine" "(" [identifier] ")" ";" .
    WriteElement      = stringLit | Expression .
    Condition         = Expression .
    Expression        = AddExp [ RelOp AddExp ] .
    AddExp            = [ "+" | "-" ] Term { AddOp Term } .
    Term              = Factor { MulOp Factor } .
    Factor            =   Designator | Constant
                        | "new" BasicType "[" Expression "]"
                        | "!" Factor | "(" Expression ")" .
    Type              = BasicType [ "[]" ] .
    BasicType         = "int" | "bool" | "char".
    AddOp             = "+" | "-" | "||"  .
    MulOp             = "*" | "/" | "&&" | "%" .
    RelOp             = "==" | "!=" | "<" | "<=" | ">" | ">=" .
  END Parva.
